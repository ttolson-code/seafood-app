version: '2'
services:
  # nginx
  nginx-proxy:
    container_name: nginx-proxy
    image: ${ECR_URI}/nginx-proxy
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      FRONT_END: "seafood-app"
      BACK_END: "express-server"
      FRONT_END_PORT: "3000"
      BACK_END_PORT: "5000"
      FRONT_END_DOMAIN: "seafood-app.com"
      BACK_END_DOMAIN: "api.seafood-app.com"
      NGINX_PORT: "8081"
    logging:
      driver: awslogs
      options:
        awslogs-group: /ecs/nginx-proxy/
        awslogs-region: us-east-1
        awslogs-stream-prefix: seafood

  # frontend
  seafood-app:
    container_name: seafood-app
    image: ${ECR_URI}/seafood-app
    stdin_open: true
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    logging:
      driver: awslogs
      options:
        awslogs-group: /ecs/seafood-app/
        awslogs-region: us-east-1
        awslogs-stream-prefix: seafood

  # express
  express-server:
    container_name: express-server
    image: ${ECR_URI}/express-server
    stdin_open: true
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on: # ensure mongo-db is up before express container starts
      - mongo-db
    ports:
      - "5000:5000"
    environment:
      DB_URL: "mongodb://localhost:27017/"
      DB_NAME: "seafood-app"
      HOST_ADDRESS: "localhost"
    logging:
      driver: awslogs
      options:
        awslogs-group: /ecs/express-server/
        awslogs-region: us-east-1
        awslogs-stream-prefix: seafood

  # database
  mongo-db:
    container_name: mongo-db
    image: ${ECR_URI}/mongo-db
    build:
      context: ./mongo
      dockerfile: Dockerfile
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: "seafood-app"
    logging:
      driver: awslogs
      options:
        awslogs-group: /ecs/mongo-db/
        awslogs-region: us-east-1
        awslogs-stream-prefix: seafood